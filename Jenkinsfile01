pipeline {
    agent {
        docker {
            image 'docker:19.03.12-dind'  // Use Docker-in-Docker image
            args '-u root --privileged -v /var/run/docker.sock:/var/run/docker.sock' // Docker socket and privileges
        }
    }

    environment {
        DOCKERHUB_CRED_ID = 'cf3a74d7-7de7-4028-8b23-456dec1e21b8'
        SONAR_SCANNER_HOME = tool 'Sonarqube'
    }

        stages {
            stage('Checkout') {
                steps {
                    // Checkout the code from GitHub
                    git url: 'https://github.com/ahmvdshafiq/realtimeChatAppCicd', branch: 'master'
                }
            }
    
        stage('Install Node.js') {
                steps {
                    script {
                        // Install Node.js in the Docker container
                        sh 'apk add --no-cache nodejs npm'  // Using Alpine package manager since Docker base is Alpine
                    }
                }
            }

        stage('Build') {
            steps {
                script {
                    docker.build("madbakoyoyo/node-chat-app:${env.BUILD_NUMBER}")
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube Scanner with credentials
                    withCredentials([string(credentialsId: 'sonarQube-token', variable: 'SONARQUBE_AUTH_TOKEN')]) {
                        withSonarQubeEnv('SonarQubeServer') { // Name of your SonarQube server in Jenkins configuration
                            sh """
                            ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=real-chat-app \
                            -Dsonar.sources=src \
                            -Dsonar.host.url=${SONARQUBE_URL} \
                            -Dsonar.login=${SONARQUBE_AUTH_TOKEN}
                            """
                        }
                    }
                }
            }
        }


        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'DH_PASS', variable: 'DOCKER_PASS')]) {
                        docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CRED_ID) {
                            sh 'echo $DOCKER_PASS | docker login -u madbakoyoyo --password-stdin'
                            docker.image("madbakoyoyo/node-chat-app:${env.BUILD_NUMBER}").push()
                        }
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'e542d8b5-4b38-4322-9cf3-ba466e22d55d', keyFileVariable: 'keyfile')]) {
                        sh """
                        ssh -o StrictHostKeyChecking=no -i ${keyfile} ubuntu@13.215.51.100 <<EOF
                            # Stop and remove any existing container
                            docker stop node-chat-app || true
                            docker rm node-chat-app || true

                            # Pull the latest Docker image
                            docker pull madbakoyoyo/node-chat-app:${env.BUILD_NUMBER}

                            # Run the container
                            docker run -d -p 3000:3000 --name node-chat-app madbakoyoyo/node-chat-app:${env.BUILD_NUMBER}
EOF
                        """
                    }
                }
            }
        }
    }
}
